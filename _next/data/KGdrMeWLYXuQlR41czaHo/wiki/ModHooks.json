{"pageProps":{"data":{"contentHtml":"<h2 id=\"overview\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"position-relative\" href=\"#overview\"><span class=\"icon icon-link\"></span></a>Overview</h2>\n<p>Advanced users only.</p>\n<p>The Mod Hook system enables interception and modification of game methods without extensive boilerplate or conflicts with other modifications. This system combines native hooking and managed delegates (Harmony‑style patching) to inject custom logic before or after the original method invocation.</p>\n<p>At its core, the abstract class <code class=\"hljs\">ModHook&#x3C;TNative, TManaged></code> (where <code class=\"hljs\">TNative</code> is the unmanaged delegate type and <code class=\"hljs\">TManaged</code> is the managed delegate type) encapsulates:</p>\n<ul>\n<li>\n<p><strong>Native Hook Attachment</strong><br>\nUtilizes <code class=\"hljs\">MelonLoader.NativeUtils.NativeHook&#x3C;TNative></code> to bind your hook to the target method.</p>\n</li>\n<li>\n<p><strong>Hook Management</strong><br>\nMaintains two priority‑sorted dictionaries for prefix and postfix hooks to control execution order.</p>\n</li>\n<li>\n<p><strong>Original Method Invocation</strong><br>\nEmploys the <code class=\"hljs\">TrampolineInvoker</code> (constructed via Expression Trees) to invoke the original method accurately after hook execution.</p>\n</li>\n</ul>\n<h2 id=\"internal-architecture\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"position-relative\" href=\"#internal-architecture\"><span class=\"icon icon-link\"></span></a>Internal Architecture</h2>\n<h3 id=\"delegate-validation\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"position-relative\" href=\"#delegate-validation\"><span class=\"icon icon-link\"></span></a>Delegate Validation</h3>\n<p>Before any hook is created, the system verifies that <code class=\"hljs\">TNative</code> is decorated with</p>\n<pre><code class=\"hljs language-cs\">[<span class=\"hljs-meta\">UnmanagedFunctionPointer(CallingConvention.Cdecl)</span>]\n</code></pre>\n<p>If this requirement is not met, an error is logged and the hook setup is aborted.</p>\n<h3 id=\"hook-attachment-process\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"position-relative\" href=\"#hook-attachment-process\"><span class=\"icon icon-link\"></span></a>Hook Attachment Process</h3>\n<p>When <code class=\"hljs\">AddPrefix(TManaged method)</code> or <code class=\"hljs\">AddPostfix(TManaged method)</code> is called:</p>\n<ol>\n<li>\n<p><strong>Check Existing Hook</strong><br>\nDetermines whether a native hook is already attached. If so, adds the prefix/postfix to the dictionary.</p>\n</li>\n<li>\n<p><strong>Create and Attach Hook</strong></p>\n<ul>\n<li>Retrieves the method pointer from the IL2CPP runtime via<br>\n<code class=\"hljs\">Il2CppInteropUtils.GetIl2CppMethodInfoPointerFieldForGeneratedMethod</code>.</li>\n<li>Converts the managed delegate to an unmanaged function pointer.</li>\n<li>Wraps the original method pointer with the custom delegate and attaches the native hook.</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"original-method-invocation\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"position-relative\" href=\"#original-method-invocation\"><span class=\"icon icon-link\"></span></a>Original Method Invocation</h3>\n<p>The <code class=\"hljs\">CallOriginalMethod</code> function uses a precompiled lambda in <code class=\"hljs\">TrampolineInvoker</code> to invoke the original method. This supports:</p>\n<ul>\n<li><strong>Prefix Hooks</strong> (executed before the original method)</li>\n<li><strong>Postfix Hooks</strong> (executed after the original method)</li>\n<li><strong>Replacement Hooks</strong> (substituting the original method entirely)</li>\n</ul>\n<h3 id=\"hook-priority-and-execution-order\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"position-relative\" href=\"#hook-priority-and-execution-order\"><span class=\"icon icon-link\"></span></a>Hook Priority and Execution Order</h3>\n<p>Prefix and postfix hooks are stored in separate dictionaries keyed by priority. Hooks with higher priority values execute first, providing precise control over invocation order.</p>\n<h2 id=\"concrete-implementations\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"position-relative\" href=\"#concrete-implementations\"><span class=\"icon icon-link\"></span></a>Concrete Implementations</h2>\n<p>As of Bloons TD6 v48, the following hook implementations are provided:</p>\n<ul>\n<li>\n<p><strong><code class=\"hljs\">BloonDamageHook</code></strong><br>\nHooks into the Bloon.Damage method.</p>\n</li>\n<li>\n<p><strong><code class=\"hljs\">BloonDegradeHook</code></strong><br>\nHooks into the Bloon.Degrade method.</p>\n</li>\n</ul>\n<p>Both implementations follow this pattern:</p>\n<ol>\n<li>Convert native pointers to managed objects.</li>\n<li>Execute all prefix hooks; abort if any returns <code class=\"hljs\">false</code>.</li>\n<li>Invoke the original method via <code class=\"hljs\">CallOriginalMethod</code>.</li>\n<li>Execute all postfix hooks; abort if any returns <code class=\"hljs\">false</code>.</li>\n</ol>\n<h2 id=\"parameter-passing-in-hooks\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"position-relative\" href=\"#parameter-passing-in-hooks\"><span class=\"icon icon-link\"></span></a>Parameter Passing in Hooks</h2>\n<p>Hook methods may declare any parameters from the original signature:</p>\n<ul>\n<li>\n<p><strong>By Value</strong><br>\nNon‑<code class=\"hljs\">Il2CppObjectBase</code> types may be passed by value.</p>\n</li>\n<li>\n<p><strong>By Reference</strong><br>\nUse the <code class=\"hljs\">ref</code> keyword to modify parameter values; changes propagate through the hook chain.</p>\n</li>\n</ul>\n<p><em>Parameters inheriting from <code class=\"hljs\">Il2CppObjectBase</code> are implicitly passed by reference.</em></p>\n<h3 id=\"prefix-hooks\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"position-relative\" href=\"#prefix-hooks\"><span class=\"icon icon-link\"></span></a>Prefix Hooks</h3>\n<p>Prefix hooks can inspect or adjust incoming parameters. Returning <code class=\"hljs\">false</code> prevents execution of subsequent hooks and the original method.</p>\n<h3 id=\"postfix-hooks\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"position-relative\" href=\"#postfix-hooks\"><span class=\"icon icon-link\"></span></a>Postfix Hooks</h3>\n<p>Postfix hooks execute after the original method. Modifications to <code class=\"hljs\">ref</code> parameters affect only subsequent postfix hooks, not the outcome of the original method.</p>\n<h2 id=\"examples\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"position-relative\" href=\"#examples\"><span class=\"icon icon-link\"></span></a>Examples</h2>\n<pre><code class=\"hljs language-cs\">[<span class=\"hljs-meta\">HookTarget(typeof(BloonDamageHook), HookTargetAttribute.EHookType.Prefix)</span>]\n[<span class=\"hljs-meta\">HookPriority(HookPriorityAttribute.HIGHER)</span>]\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-built_in\">bool</span> <span class=\"hljs-title\">DamageHook</span>(<span class=\"hljs-params\">Bloon @<span class=\"hljs-keyword\">this</span>, <span class=\"hljs-built_in\">float</span> totalAmount</span>)</span> {\n    <span class=\"hljs-keyword\">if</span> (@this != <span class=\"hljs-literal\">null</span>) {\n        MelonLogger.Msg(<span class=\"hljs-string\">$\"Bloon ID <span class=\"hljs-subst\">{@<span class=\"hljs-keyword\">this</span>.Id}</span> would receive <span class=\"hljs-subst\">{totalAmount:N0}</span> damage.\"</span>);\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>; <span class=\"hljs-comment\">// Abort further execution, including the original method.</span>\n}\n</code></pre>\n<pre><code class=\"hljs language-cs\">[<span class=\"hljs-meta\">HookTarget(typeof(BloonDamageHook), HookTargetAttribute.EHookType.Postfix)</span>]\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-built_in\">bool</span> <span class=\"hljs-title\">PostDamageHook</span>(<span class=\"hljs-params\">Bloon @<span class=\"hljs-keyword\">this</span>, <span class=\"hljs-keyword\">ref</span> <span class=\"hljs-built_in\">float</span> totalAmount, Projectile projectile, <span class=\"hljs-keyword\">ref</span> <span class=\"hljs-built_in\">bool</span> distributeToChildren, \n<span class=\"hljs-keyword\">ref</span> <span class=\"hljs-built_in\">bool</span> overrideDistributeBlocker, <span class=\"hljs-keyword\">ref</span> <span class=\"hljs-built_in\">bool</span> createEffect, Tower tower, BloonProperties immuneBloonProperties, \nBloonProperties originalImmuneBloonProperties, <span class=\"hljs-keyword\">ref</span> <span class=\"hljs-built_in\">bool</span> canDestroyProjectile, <span class=\"hljs-keyword\">ref</span> <span class=\"hljs-built_in\">bool</span> ignoreNonTargetable, <span class=\"hljs-keyword\">ref</span> <span class=\"hljs-built_in\">bool</span> blockSpawnChildren, \n<span class=\"hljs-keyword\">ref</span> <span class=\"hljs-built_in\">bool</span> ignoreInvulnerable, HookNullable&#x3C;<span class=\"hljs-built_in\">int</span>> powerActivatedByPlayerId</span>)</span> {\n    <span class=\"hljs-keyword\">if</span> (@this != <span class=\"hljs-literal\">null</span>) {\n        MelonLogger.Msg(<span class=\"hljs-string\">$\"Bloon ID <span class=\"hljs-subst\">{@<span class=\"hljs-keyword\">this</span>.Id}</span> received <span class=\"hljs-subst\">{totalAmount:N0}</span> damage.\"</span>);\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>; <span class=\"hljs-comment\">// Continue execution of remaining hooks.</span>\n}\n</code></pre>","tableOfContentsHtml":"<nav class=\"toc\"><ol class=\"toc-level toc-level-1\"><li class=\"toc-item toc-item-h2\"><a class=\"toc-link toc-link-h2\" href=\"#overview\">Overview</a></li><li class=\"toc-item toc-item-h2\"><a class=\"toc-link toc-link-h2\" href=\"#internal-architecture\">Internal Architecture</a><ol class=\"toc-level toc-level-2\"><li class=\"toc-item toc-item-h3\"><a class=\"toc-link toc-link-h3\" href=\"#delegate-validation\">Delegate Validation</a></li><li class=\"toc-item toc-item-h3\"><a class=\"toc-link toc-link-h3\" href=\"#hook-attachment-process\">Hook Attachment Process</a></li><li class=\"toc-item toc-item-h3\"><a class=\"toc-link toc-link-h3\" href=\"#original-method-invocation\">Original Method Invocation</a></li><li class=\"toc-item toc-item-h3\"><a class=\"toc-link toc-link-h3\" href=\"#hook-priority-and-execution-order\">Hook Priority and Execution Order</a></li></ol></li><li class=\"toc-item toc-item-h2\"><a class=\"toc-link toc-link-h2\" href=\"#concrete-implementations\">Concrete Implementations</a></li><li class=\"toc-item toc-item-h2\"><a class=\"toc-link toc-link-h2\" href=\"#parameter-passing-in-hooks\">Parameter Passing in Hooks</a><ol class=\"toc-level toc-level-2\"><li class=\"toc-item toc-item-h3\"><a class=\"toc-link toc-link-h3\" href=\"#prefix-hooks\">Prefix Hooks</a></li><li class=\"toc-item toc-item-h3\"><a class=\"toc-link toc-link-h3\" href=\"#postfix-hooks\">Postfix Hooks</a></li></ol></li><li class=\"toc-item toc-item-h2\"><a class=\"toc-link toc-link-h2\" href=\"#examples\">Examples</a></li></ol></nav>","title":"ModHooks"},"sidebar":{"contentHtml":"<h5 id=\"home\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"position-relative\" href=\"#home\"><span class=\"icon icon-link\"></span></a><a href=\"/wiki/Home\">Home</a></h5>\n<h5 id=\"install-guide\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"position-relative\" href=\"#install-guide\"><span class=\"icon icon-link\"></span></a><a href=\"/wiki/Install-Guide\">Install Guide</a></h5>\n<h6 id=\"starting-btd-modding\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"position-relative\" href=\"#starting-btd-modding\"><span class=\"icon icon-link\"></span></a>Starting BTD Modding</h6>\n<p><a href=\"/wiki/Prerequisites\">Prerequisites</a></p>\n<p><a href=\"/wiki/Getting-Started\">Getting Started</a></p>\n<h6 id=\"mod-helper-features\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"position-relative\" href=\"#mod-helper-features\"><span class=\"icon icon-link\"></span></a>Mod Helper Features</h6>\n<p><a href=\"/wiki/Making-a-Custom-Tower\"><strong>Making a Custom Tower</strong></a></p>\n<p><a href=\"/wiki/Making-a-Custom-Paragon\"><strong>Making a Custom Paragon</strong></a></p>\n<p><a href=\"/wiki/Making-a-Custom-Hero\"><strong>Making a Custom Hero</strong></a></p>\n<p><a href=\"/wiki/Appearing-in-the-Mod-Browser\"><strong>Appearing in the Mod Browser</strong></a></p>\n<p><a href=\"/wiki/Localization\">Localization</a></p>\n<p><a href=\"/wiki/Making-a-Custom-Bloon\">Making a Custom Bloon</a></p>\n<p><a href=\"/wiki/Making-a-Custom-Game-Mode\">Making a Custom Game Mode</a></p>\n<p><a href=\"/wiki/Making-a-Custom-Round-Set\">Making a Custom Round Set</a></p>\n<p><a href=\"/wiki/Making-a-Custom-Jukebox-Track\">Making a Custom Jukebox Track</a></p>\n<p><a href=\"/wiki/Making-a-Custom-Artifact\">Making a Custom Artifact</a></p>\n<p><a href=\"/wiki/Custom-UI\">Custom UI (ModHelperComponents)</a></p>\n<p><a href=\"/wiki/Custom-Menu-Screens\">Custom Menu Screens</a></p>\n<p><a href=\"/wiki/Custom-Byte-Loaders\">Custom Byte Loaders</a></p>\n<h6 id=\"btd-modding-info\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"position-relative\" href=\"#btd-modding-info\"><span class=\"icon icon-link\"></span></a>BTD Modding Info</h6>\n<p><a href=\"/wiki/BTD6-Internal-Structure\">BTD6 Internal Structure</a></p>\n<p><a href=\"/wiki/Looking-at-BTD6-Code-(Sorta)\">Looking at BTD6 Code (Sorta)</a></p>\n<p><a href=\"/wiki/IL2CPP-Is-Weird\">IL2CPP Is Weird</a></p>\n<p><a href=\"/wiki/Useful-Resources\">Useful Resources</a></p>\n<h6 id=\"mod-helper-utilities\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"position-relative\" href=\"#mod-helper-utilities\"><span class=\"icon icon-link\"></span></a>Mod Helper Utilities</h6>\n<p><a href=\"/wiki/Using-Mod-Helper-Hooks\">Using Mod Helper Hooks</a></p>\n<p><a href=\"/wiki/ModContent\">ModContent</a></p>\n<p><a href=\"/wiki/Custom-Textures-and-Displays\">Custom Textures and Displays</a></p>\n<p><a href=\"/wiki/Mod-Settings\">In Game Mod Settings</a></p>\n<p><a href=\"/wiki/ModHooks\">Mod Hooks</a></p>\n<h6 id=\"extension-methods\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"position-relative\" href=\"#extension-methods\"><span class=\"icon icon-link\"></span></a>Extension Methods</h6>\n<p><a href=\"/wiki/Common-Extension-Methods\">Common Extension Methods</a></p>\n<p><a href=\"/wiki/Array-extension-methods\">Array Extension Methods</a></p>","tableOfContentsHtml":"<nav class=\"toc\"><ol class=\"toc-level toc-level-1\"><li class=\"toc-item toc-item-h5\"><a class=\"toc-link toc-link-h5\" href=\"#home\">Home</a></li><li class=\"toc-item toc-item-h5\"><a class=\"toc-link toc-link-h5\" href=\"#install-guide\">Install Guide</a><ol class=\"toc-level toc-level-2\"><li class=\"toc-item toc-item-h6\"><a class=\"toc-link toc-link-h6\" href=\"#starting-btd-modding\">Starting BTD Modding</a></li><li class=\"toc-item toc-item-h6\"><a class=\"toc-link toc-link-h6\" href=\"#mod-helper-features\">Mod Helper Features</a></li><li class=\"toc-item toc-item-h6\"><a class=\"toc-link toc-link-h6\" href=\"#btd-modding-info\">BTD Modding Info</a></li><li class=\"toc-item toc-item-h6\"><a class=\"toc-link toc-link-h6\" href=\"#mod-helper-utilities\">Mod Helper Utilities</a></li><li class=\"toc-item toc-item-h6\"><a class=\"toc-link toc-link-h6\" href=\"#extension-methods\">Extension Methods</a></li></ol></li></ol></nav>"}},"__N_SSG":true}