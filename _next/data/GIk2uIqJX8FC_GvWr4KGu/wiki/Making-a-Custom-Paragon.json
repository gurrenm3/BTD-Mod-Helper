{"pageProps":{"data":{"contentHtml":"<p><strong>This guide assumes that you have an already working custom <code class=\"hljs\">ModTower</code> with all 3 upgrade paths implemented and all 5 upgrades each. If you don't have that then follow <a href=\"/wiki/Making-a-Custom-Tower\">this</a> guide and get all that created first.</strong></p>\n<h1 id=\"modtower-changes\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"position-relative\" href=\"#modtower-changes\"><span class=\"icon icon-link\"></span></a>ModTower Changes</h1>\n<p>To give your <code class=\"hljs\">ModTower</code> a Paragon, the only change you need to make is to override the <code class=\"hljs\">ParagonMode</code> property. You have the following options for it:</p>\n<p><code class=\"hljs\">ParagonMode.Base000</code>: The Mod Helper will use the 0-0-0 version of your Tower as the base TowerModel for you to create the Paragon from.</p>\n<p><code class=\"hljs\">ParagonMode.Base555</code>: The Mod Helper will use the 5-5-5 version of your Tower (same as you'd get when using the Ultimate Crosspathing mod) as the base TowerModel for you to create the Paragon from.</p>\n<p>There's also obviously <code class=\"hljs\">ParagonMode.None</code>, but that's just the default, and if you're reading this guide then you probably don't want to use that.</p>\n<p>For example, the Card Monkey mod uses the 555 mode.</p>\n<pre><code class=\"hljs language-cs\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CardMonkey</span> : <span class=\"hljs-title\">ModTower</span> {\n\n    <span class=\"hljs-comment\">/* ... */</span>\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">override</span> ParagonMode ParagonMode => ParagonMode.Base555;\n\n    <span class=\"hljs-comment\">/* ... */</span>\n\n}\n</code></pre>\n<h1 id=\"modparagonupgrade\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"position-relative\" href=\"#modparagonupgrade\"><span class=\"icon icon-link\"></span></a>ModParagonUpgrade</h1>\n<p>The next and most important step is to create a new class that extends <code class=\"hljs\">ModParagonUpgrade</code>, and to pass in your <code class=\"hljs\">ModTower</code> as its generic type.</p>\n<p>This <code class=\"hljs\">ModParagonUpgrade</code> has all the normal properties for you to override just like a normal <code class=\"hljs\">ModUpgrade</code>. The additional things to note are:</p>\n<p><code class=\"hljs\">ApplyUpgrade(TowerModel towerModel)</code>: Same functionality, this should handle all the logic of the attacks and behaviors of your Paragon. It does <em>not</em> need to handle giving your Paragon the <code class=\"hljs\">ParagonTowerModel</code> behavior, because instead...</p>\n<p><code class=\"hljs\">ParagonTowerModel</code>: An optional property for the <code class=\"hljs\">ParagonTowerModel</code> behavior that should be given to this Paragon. If you don't override it, then the Boomerang Paragon's behavior will be used.</p>\n<p><code class=\"hljs\">RemoveAbilities</code>: An optional property for automatically removing any abilities from the base <code class=\"hljs\">TowerModel</code> like real Paragons, defaults to true.</p>\n<p>Here's a complete example of a ModParagonUpgrade from the CardMonkey mod:</p>\n<pre><code class=\"hljs language-cs\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">GodKingOfSpades</span> : <span class=\"hljs-title\">ModParagonUpgrade</span>&#x3C;<span class=\"hljs-title\">CardMonkey</span>>\n{\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">override</span> <span class=\"hljs-built_in\">int</span> Cost => <span class=\"hljs-number\">400000</span>;\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">override</span> <span class=\"hljs-built_in\">string</span> Description => <span class=\"hljs-string\">\"Sometimes the hand of fate must be forced...\"</span>;\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">override</span> <span class=\"hljs-built_in\">string</span> DisplayName => <span class=\"hljs-string\">\"God-King of Spades\"</span>;\n\n    <span class=\"hljs-comment\">// This is getting its Icon and Portrait from GodKingOfSpades-Icon.png and GodKingOfSpace-Portrait.png, so no other overriding needed</span>\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">override</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">ApplyUpgrade</span>(<span class=\"hljs-params\">TowerModel towerModel</span>)</span>\n    {\n        <span class=\"hljs-comment\">// Using 555 mode so not much has to be done here if you don't want to</span>\n    }\n}\n</code></pre>\n<h1 id=\"new-modtowerdisplays\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"position-relative\" href=\"#new-modtowerdisplays\"><span class=\"icon icon-link\"></span></a>New ModTowerDisplays</h1>\n<p>Paragons use different displays based on what degree they are, and that's normally controlled by the <code class=\"hljs\">ParagonTowerModel</code> behavior. If you don't want to deal with that yourself, you can make use of some new features of <code class=\"hljs\">ModTowerDisplay</code>s:</p>\n<p><code class=\"hljs\">ParagonDisplayIndex</code>: A number between 0 and 4 (inclusive) representing which set of paragon degrees this display applies to</p>\n<ul>\n<li>0: Degree 1 - 20</li>\n<li>1: Degree 21 - 40</li>\n<li>2: Degree 41 - 60</li>\n<li>3: Degree 61 - 80</li>\n<li>4: Degree 81 - 100</li>\n</ul>\n<p>If you don't have one for every index, then the next highest one will be used. By default on a <code class=\"hljs\">ModTowerDisplay</code> this is set to -1, meaning it won't interact with the <code class=\"hljs\">ParagonTowerModel</code> behavior. If you don't care about having different displays, just do everything normally and then set this to 0.</p>\n<p><code class=\"hljs\">UseForTower(int[] tiers)</code>: When overriding this method, return <code class=\"hljs\">IsParagon(tiers)</code> to have it be used for your Paragon.</p>\n<p>Here's a complete example of a <code class=\"hljs\">ModTowerDisplay</code> for a Paragon from Card Monkey. This uses the advanced method of overriding <code class=\"hljs\">Load()</code> to create multiple versions of the display, one for each <code class=\"hljs\">ParagonDisplayIndex</code>, in this case at a different scale for each.</p>\n<pre><code class=\"hljs language-cs\">\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CardMonkeyParagonDisplay</span> : <span class=\"hljs-title\">ModTowerDisplay</span>&#x3C;<span class=\"hljs-title\">CardMonkey</span>>\n{\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">override</span> <span class=\"hljs-built_in\">float</span> Scale => <span class=\"hljs-number\">.75</span>f + ParagonDisplayIndex * <span class=\"hljs-number\">.025</span>f;  <span class=\"hljs-comment\">// Higher degree Paragon displays will be bigger</span>\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">override</span> <span class=\"hljs-built_in\">string</span> BaseDisplay =>  <span class=\"hljs-comment\">// The floating monkey part of the True Sun God</span>\n        Game.instance.model.GetTower(TowerType.SuperMonkey, <span class=\"hljs-number\">5</span>).GetAttackModel().GetBehavior&#x3C;DisplayModel>().display;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">override</span> <span class=\"hljs-built_in\">bool</span> <span class=\"hljs-title\">UseForTower</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">int</span>[] tiers</span>)</span>\n    {\n        <span class=\"hljs-keyword\">return</span> IsParagon(tiers);\n    }\n\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&#x3C;summary></span></span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> All classes that derive from ModContent MUST have a zero argument constructor to work</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&#x3C;/summary></span></span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">CardMonkeyParagonDisplay</span>()</span>\n    {\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">CardMonkeyParagonDisplay</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">int</span> i</span>)</span>\n    {\n        ParagonDisplayIndex = i;\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">override</span> <span class=\"hljs-built_in\">int</span> ParagonDisplayIndex { <span class=\"hljs-keyword\">get</span>; }  <span class=\"hljs-comment\">// Overriding in this way lets us set it in the constructor</span>\n\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&#x3C;summary></span></span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> Create a display for each possible ParagonDisplayIndex</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&#x3C;/summary></span></span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&#x3C;returns></span><span class=\"hljs-doctag\">&#x3C;/returns></span></span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">override</span> IEnumerable&#x3C;ModContent> <span class=\"hljs-title\">Load</span>()</span>\n    {\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &#x3C; TotalParagonDisplays; i++)\n        {\n            <span class=\"hljs-function\"><span class=\"hljs-keyword\">yield</span> <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title\">CardMonkeyParagonDisplay</span>(<span class=\"hljs-params\">i</span>)</span>;\n        }\n    }\n\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">override</span> <span class=\"hljs-built_in\">string</span> Name => <span class=\"hljs-keyword\">nameof</span>(CardMonkeyParagonDisplay) + ParagonDisplayIndex;  <span class=\"hljs-comment\">// make sure each instance has its own name</span>\n\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&#x3C;summary></span></span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> Could use the ParagonDisplayIndex property to use different effects based on the paragon strength</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&#x3C;/summary></span></span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&#x3C;param name=\"node\"></span><span class=\"hljs-doctag\">&#x3C;/param></span></span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">override</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">ModifyDisplayNode</span>(<span class=\"hljs-params\">UnityDisplayNode node</span>)</span>\n    {\n        <span class=\"hljs-comment\">//node.PrintInfo();</span>\n        <span class=\"hljs-comment\">//node.SaveMeshTexture();</span>\n        SetMeshTexture(node, <span class=\"hljs-keyword\">nameof</span>(CardMonkeyParagonDisplay));\n    }\n}\n</code></pre>\n<hr>\n<h1 id=\"congratulations-you-know-have-all-the-required-information-on-the-mod-helpers-role-in-making-custom-paragons-for-your-custom-towers-now-you-just-gotta-get-into-the-nitty-gritty-with-behaviors-or-not-if-youre-satisfied-with-555-mode\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"position-relative\" href=\"#congratulations-you-know-have-all-the-required-information-on-the-mod-helpers-role-in-making-custom-paragons-for-your-custom-towers-now-you-just-gotta-get-into-the-nitty-gritty-with-behaviors-or-not-if-youre-satisfied-with-555-mode\"><span class=\"icon icon-link\"></span></a>Congratulations! You know have all the required information on the Mod Helper's role in making custom Paragons for your custom towers. Now you just gotta get into the nitty gritty with behaviors, or not, if you're satisfied with 555 mode.</h1>","tableOfContentsHtml":"<nav class=\"toc\"><ol class=\"toc-level toc-level-1\"><li class=\"toc-item toc-item-h1\"><a class=\"toc-link toc-link-h1\" href=\"#modtower-changes\">ModTower Changes</a></li><li class=\"toc-item toc-item-h1\"><a class=\"toc-link toc-link-h1\" href=\"#modparagonupgrade\">ModParagonUpgrade</a></li><li class=\"toc-item toc-item-h1\"><a class=\"toc-link toc-link-h1\" href=\"#new-modtowerdisplays\">New ModTowerDisplays</a></li><li class=\"toc-item toc-item-h1\"><a class=\"toc-link toc-link-h1\" href=\"#congratulations-you-know-have-all-the-required-information-on-the-mod-helpers-role-in-making-custom-paragons-for-your-custom-towers-now-you-just-gotta-get-into-the-nitty-gritty-with-behaviors-or-not-if-youre-satisfied-with-555-mode\">Congratulations! ...</a></li></ol></nav>","title":"Making a Custom Paragon"},"sidebar":{"contentHtml":"<h5 id=\"home\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"position-relative\" href=\"#home\"><span class=\"icon icon-link\"></span></a><a href=\"/wiki/Home\">Home</a></h5>\n<h5 id=\"install-guide\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"position-relative\" href=\"#install-guide\"><span class=\"icon icon-link\"></span></a><a href=\"/wiki/Install-Guide\">Install Guide</a></h5>\n<h6 id=\"starting-btd-modding\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"position-relative\" href=\"#starting-btd-modding\"><span class=\"icon icon-link\"></span></a>Starting BTD Modding</h6>\n<p><a href=\"/wiki/Prerequisites\">Prerequisites</a></p>\n<p><a href=\"/wiki/Getting-Started\">Getting Started</a></p>\n<h6 id=\"mod-helper-features\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"position-relative\" href=\"#mod-helper-features\"><span class=\"icon icon-link\"></span></a>Mod Helper Features</h6>\n<p><a href=\"/wiki/Making-a-Custom-Tower\"><strong>Making a Custom Tower</strong></a></p>\n<p><a href=\"/wiki/Making-a-Custom-Paragon\"><strong>Making a Custom Paragon</strong></a></p>\n<p><a href=\"/wiki/Making-a-Custom-Hero\"><strong>Making a Custom Hero</strong></a></p>\n<p><a href=\"/wiki/Appearing-in-the-Mod-Browser\"><strong>Appearing in the Mod Browser</strong></a></p>\n<p><a href=\"/wiki/Localization\">Localization</a></p>\n<p><a href=\"/wiki/Making-a-Custom-Bloon\">Making a Custom Bloon</a></p>\n<p><a href=\"/wiki/Making-a-Custom-Game-Mode\">Making a Custom Game Mode</a></p>\n<p><a href=\"/wiki/Making-a-Custom-Round-Set\">Making a Custom Round Set</a></p>\n<p><a href=\"/wiki/Making-a-Custom-Jukebox-Track\">Making a Custom Jukebox Track</a></p>\n<p><a href=\"/wiki/Making-a-Custom-Artifact\">Making a Custom Artifact</a></p>\n<p><a href=\"/wiki/Custom-UI\">Custom UI (ModHelperComponents)</a></p>\n<p><a href=\"/wiki/Custom-Menu-Screens\">Custom Menu Screens</a></p>\n<p><a href=\"/wiki/Custom-Byte-Loaders\">Custom Byte Loaders</a></p>\n<h6 id=\"btd-modding-info\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"position-relative\" href=\"#btd-modding-info\"><span class=\"icon icon-link\"></span></a>BTD Modding Info</h6>\n<p><a href=\"/wiki/BTD6-Internal-Structure\">BTD6 Internal Structure</a></p>\n<p><a href=\"/wiki/Looking-at-BTD6-Code-(Sorta)\">Looking at BTD6 Code (Sorta)</a></p>\n<p><a href=\"/wiki/IL2CPP-Is-Weird\">IL2CPP Is Weird</a></p>\n<p><a href=\"/wiki/Useful-Resources\">Useful Resources</a></p>\n<h6 id=\"mod-helper-utilities\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"position-relative\" href=\"#mod-helper-utilities\"><span class=\"icon icon-link\"></span></a>Mod Helper Utilities</h6>\n<p><a href=\"/wiki/Using-Mod-Helper-Hooks\">Using Mod Helper Hooks</a></p>\n<p><a href=\"/wiki/ModContent\">ModContent</a></p>\n<p><a href=\"/wiki/Custom-Textures-and-Displays\">Custom Textures and Displays</a></p>\n<p><a href=\"/wiki/Mod-Settings\">In Game Mod Settings</a></p>\n<p><a href=\"/wiki/ModHooks\">Mod Hooks</a></p>\n<h6 id=\"extension-methods\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"position-relative\" href=\"#extension-methods\"><span class=\"icon icon-link\"></span></a>Extension Methods</h6>\n<p><a href=\"/wiki/Common-Extension-Methods\">Common Extension Methods</a></p>\n<p><a href=\"/wiki/Array-extension-methods\">Array Extension Methods</a></p>","tableOfContentsHtml":"<nav class=\"toc\"><ol class=\"toc-level toc-level-1\"><li class=\"toc-item toc-item-h5\"><a class=\"toc-link toc-link-h5\" href=\"#home\">Home</a></li><li class=\"toc-item toc-item-h5\"><a class=\"toc-link toc-link-h5\" href=\"#install-guide\">Install Guide</a><ol class=\"toc-level toc-level-2\"><li class=\"toc-item toc-item-h6\"><a class=\"toc-link toc-link-h6\" href=\"#starting-btd-modding\">Starting BTD Modding</a></li><li class=\"toc-item toc-item-h6\"><a class=\"toc-link toc-link-h6\" href=\"#mod-helper-features\">Mod Helper Features</a></li><li class=\"toc-item toc-item-h6\"><a class=\"toc-link toc-link-h6\" href=\"#btd-modding-info\">BTD Modding Info</a></li><li class=\"toc-item toc-item-h6\"><a class=\"toc-link toc-link-h6\" href=\"#mod-helper-utilities\">Mod Helper Utilities</a></li><li class=\"toc-item toc-item-h6\"><a class=\"toc-link toc-link-h6\" href=\"#extension-methods\">Extension Methods</a></li></ol></li></ol></nav>"}},"__N_SSG":true}