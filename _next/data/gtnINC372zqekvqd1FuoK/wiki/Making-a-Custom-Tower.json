{"pageProps":{"data":{"contentHtml":"<p><strong>This guide assumes that you already have at least a basic knowledge of C#, and have set up a modding environment as explained on this wiki. Without both of those things being true, this likely won't be a very useful resource for you.</strong></p>\n<p>If you want a better understanding of what exactly these steps actually do, then having at least a partial understanding of the <a href=\"/wiki/ModContent\">ModContent</a> system would be helpful.</p>\n<p>If you're not someone who likes following step by step written guides, you can look at these for some complete examples:</p>\n<p>Doombubbles' <a href=\"https://github.com/doombubbles/card-monkey#readme\">Card Monkey</a></p>\n<p>Void-n-Null's <a href=\"https://github.com/Void-n-Null/Banana-Farmer-Tower/tree/main/#readme\">Banana Farmer Tower</a></p>\n<p>Doombubbles' <a href=\"https://github.com/doombubbles/temple-base/tree/main/#readme\">Temple Base</a></p>\n<h1 id=\"modtower\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"position-relative\" href=\"#modtower\"><span class=\"icon icon-link\"></span></a>ModTower</h1>\n<p>The first and most important part of making a custom Tower is to create a new class in your project that extends from <code class=\"hljs\">ModTower</code>. As soon as you add in <code class=\"hljs\"> : ModTower</code> to your class, your IDE should prompt you to override a number of required Properties and one required Method. The explanations for those are as follows:</p>\n<h2 id=\"required-properties\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"position-relative\" href=\"#required-properties\"><span class=\"icon icon-link\"></span></a>Required Properties</h2>\n<p><code class=\"hljs\">TowerSet</code>: The family of Monkeys that your Tower should be put in. For now, just use one of the default constants provided of <code class=\"hljs\">PRIMARY</code>, <code class=\"hljs\">MILITARY</code>, <code class=\"hljs\">MAGIC</code>, or <code class=\"hljs\">SUPPORT</code>.</p>\n<p><code class=\"hljs\">BaseTower</code>: The id of the default BTD Tower that your Tower is going to be copied from by default. So, if your Tower is most similar to a Dart Monkey, for instance, you should do <code class=\"hljs\">public override string BaseTower => TowerType.DartMonkey;</code></p>\n<p><code class=\"hljs\">Cost</code>: The base cost that your Tower should be on Medium difficulty.</p>\n<p><code class=\"hljs\">TopPathUpgrades</code>: The number of Upgrades your Tower has / will have in its Top path.</p>\n<p><code class=\"hljs\">MiddlePathUpgrades</code>: The number of Upgrades your Tower has / will have in its Middle path.</p>\n<p><code class=\"hljs\">BottomPathUpgrades</code>: The number of Upgrades your Tower has / will have in its Bottom path.</p>\n<p><code class=\"hljs\">Description</code>: The text description to use for this Tower, as seen in the Upgrade menu and stuff.</p>\n<h2 id=\"modifybasetowermodel\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"position-relative\" href=\"#modifybasetowermodel\"><span class=\"icon icon-link\"></span></a>ModifyBaseTowerModel</h2>\n<p><code class=\"hljs\">ModifyBaseTowerModel(TowerModel towerModel)</code> is the only required method for you to override, and it's the most important. Here you will handle actually making your Tower different from the one you defined in <code class=\"hljs\">BaseTower</code>.</p>\n<p>The <code class=\"hljs\">towerModel</code> variable represents a <code class=\"hljs\">TowerModel</code> object that has already been prepared by the Mod Helper for you to edit. Basically all of the simple things like <code class=\"hljs\">name</code>, <code class=\"hljs\">id</code>, <code class=\"hljs\">tiers</code>, <code class=\"hljs\">appliedUpgrades</code>, <code class=\"hljs\">display</code> have already been taken care of at this point, so the main thing you need to do here is change the Tower's <code class=\"hljs\">behaviors</code>.</p>\n<p>All this method actually needs to do is set up the 0-0-0 version of your Tower, because the <code class=\"hljs\">ModUpgrade</code> system will be doing the rest.</p>\n<h2 id=\"portrait-and-icon\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"position-relative\" href=\"#portrait-and-icon\"><span class=\"icon icon-link\"></span></a>Portrait and Icon</h2>\n<p>The Icon and Portrait for your Tower are defaulted to being .png files named <code class=\"hljs\">TowerClass</code>-Portrait and <code class=\"hljs\">TowerClass</code>-Icon where <code class=\"hljs\">TowerClass</code> is the name of your class that extends <code class=\"hljs\">ModTower</code>.</p>\n<p>If you want to change this, then you can override the <code class=\"hljs\">Portrait</code> / <code class=\"hljs\">Icon</code> properties.</p>\n<p>OR, if you'd rather use existing <code class=\"hljs\">SpriteReference</code>s already in the game instead of adding new .pngs, you can override the <code class=\"hljs\">PortraitReference</code> and <code class=\"hljs\">IconReference</code> properties, and it won't try to use pngs.</p>\n<h2 id=\"example\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"position-relative\" href=\"#example\"><span class=\"icon icon-link\"></span></a>Example</h2>\n<p>Here's a completed example of a <code class=\"hljs\">ModTower</code> class from the Card Monkey mod</p>\n<pre><code class=\"hljs language-cs\"><span class=\"hljs-comment\">/* imports */</span>\n\n<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">CardMonkey</span>\n{\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&#x3C;summary></span></span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> The main class that adds the core tower to the game</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&#x3C;/summary></span></span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CardMonkey</span> : <span class=\"hljs-title\">ModTower</span>\n    {\n        <span class=\"hljs-comment\">// public override string Portrait => \"Don't need this, default CardMonkey-Portrait.png\";</span>\n        <span class=\"hljs-comment\">// public override string Icon => \"Don't need this, default becomes CardMonkey-Icon.png\";</span>\n\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">override</span> <span class=\"hljs-built_in\">string</span> TowerSet => PRIMARY;\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">override</span> <span class=\"hljs-built_in\">string</span> BaseTower => TowerType.DartMonkey;\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">override</span> <span class=\"hljs-built_in\">int</span> Cost => <span class=\"hljs-number\">400</span>;\n\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">override</span> <span class=\"hljs-built_in\">int</span> TopPathUpgrades => <span class=\"hljs-number\">5</span>;\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">override</span> <span class=\"hljs-built_in\">int</span> MiddlePathUpgrades => <span class=\"hljs-number\">5</span>;\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">override</span> <span class=\"hljs-built_in\">int</span> BottomPathUpgrades => <span class=\"hljs-number\">5</span>;\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">override</span> <span class=\"hljs-built_in\">string</span> Description => <span class=\"hljs-string\">\"Throws playing cards at Bloons\"</span>;\n\n        <span class=\"hljs-comment\">// public override string DisplayName => \"Don't need this, by default becomes 'Card Monkey'\"</span>\n\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">override</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">ModifyBaseTowerModel</span>(<span class=\"hljs-params\">TowerModel towerModel</span>)</span>\n        {\n            towerModel.range += <span class=\"hljs-number\">10</span>;\n            <span class=\"hljs-keyword\">var</span> attackModel = towerModel.GetAttackModel();\n            attackModel.range += <span class=\"hljs-number\">10</span>;\n            \n            \n            <span class=\"hljs-keyword\">var</span> projectile = attackModel.weapons[<span class=\"hljs-number\">0</span>].projectile;\n            projectile.ApplyDisplay&#x3C;RedCardDisplay>();  <span class=\"hljs-comment\">// Make the projectiles look like Cards</span>\n            projectile.pierce += <span class=\"hljs-number\">2</span>;\n        }\n\n    }\n}\n</code></pre>\n<hr>\n<h1 id=\"modupgrades\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"position-relative\" href=\"#modupgrades\"><span class=\"icon icon-link\"></span></a>ModUpgrade(s)</h1>\n<p>This is one of the main reasons you'd want to use the Mod Helper for your custom Tower rather than doing it all yourself. Instead of having to define the behavior of every different crosspath of your Tower yourself, the Mod Helper can let you define your individual upgrades and write the exact changes that they apply to the <code class=\"hljs\">TowerModel</code>.</p>\n<p>For every Upgrade you want your Tower to have, create a class for it that extends <code class=\"hljs\">ModUpgrade&#x3C;TowerClass></code>, where <code class=\"hljs\">TowerClass</code> is your <code class=\"hljs\">ModTower</code> extending class that this upgrade is for. When you do, you'll have to override the following:</p>\n<h2 id=\"required-properties-1\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"position-relative\" href=\"#required-properties-1\"><span class=\"icon icon-link\"></span></a>Required Properties</h2>\n<p><code class=\"hljs\">Path</code>: Which path this is an upgrade for. Use the provided <code class=\"hljs\">TOP</code>, <code class=\"hljs\">MIDDLE</code>, and <code class=\"hljs\">BOTTOM</code> constants. (But they are just 0, 1, and 2)</p>\n<p><code class=\"hljs\">Tier</code>: What tier the upgrade is, 1 - 5.</p>\n<p><code class=\"hljs\">Cost</code>: The cost that your Upgrade should be on Medium difficulty.</p>\n<p><code class=\"hljs\">Description</code>: The text description to use for this Upgrade, as seen in the Selection Menu and Upgrade Menu.</p>\n<h2 id=\"applyupgrade\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"position-relative\" href=\"#applyupgrade\"><span class=\"icon icon-link\"></span></a>ApplyUpgrade</h2>\n<p>Similarly to <code class=\"hljs\">ModTower</code>, there's just one required method to override, and it's the most important.</p>\n<p><code class=\"hljs\">ApplyUpgrade(TowerModel towerModel)</code> should contain the code to change a <code class=\"hljs\">TowerModel</code> from one that doesn't have the effects of this upgrade to one that does.</p>\n<p>Also similarly to <code class=\"hljs\">TowerModel</code>, the basic information of the tower is already there, so if you want this upgrade to have different effects depending on what tier the tower is, you can access <code class=\"hljs\">towerModel.tiers</code> or even <code class=\"hljs\">towerModel.appliedUpgrades</code> (just remember to use <code class=\"hljs\">ModContent.UpgradeID&#x3C;T>()</code> to use the exact name).</p>\n<p>By default, <code class=\"hljs\">ModUpgrade</code>s will be applied in tier order 1 - 5, doing Top -> Middle -> Bottom at each tier. If you want to change that, look at the optional <code class=\"hljs\">Priority</code> property.</p>\n<h2 id=\"portrait-and-icon-1\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"position-relative\" href=\"#portrait-and-icon-1\"><span class=\"icon icon-link\"></span></a>Portrait and Icon</h2>\n<p>The Icon associated with your Upgrade and the Portrait for your Tower when this is its strongest upgrade are defaulted to being .png files named <code class=\"hljs\">UpradeClass</code>-Portrait and <code class=\"hljs\">UpradeClass</code>-Icon where <code class=\"hljs\">UpradeClass</code> is the name of your class that extends <code class=\"hljs\">ModUpgrade</code>.</p>\n<p>If you want to change this, then you can override the <code class=\"hljs\">Portrait</code> / <code class=\"hljs\">Icon</code> properties.</p>\n<p>The Mod Helper uses the same logic as the base game does for deciding that towers with two highest tier upgrades at the same tier should have portraits determined as Middle > Top > Bottom.</p>\n<h2 id=\"example-1\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"position-relative\" href=\"#example-1\"><span class=\"icon icon-link\"></span></a>Example</h2>\n<p>Here's a completed example of a <code class=\"hljs\">ModUpgrade</code> class from the Card Monkey mod</p>\n<pre><code class=\"hljs language-cs\"><span class=\"hljs-comment\">/* imports */</span>\n\n<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">CardMonkey.Upgrades.TopPath</span>\n{\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Pair</span> : <span class=\"hljs-title\">ModUpgrade</span>&#x3C;<span class=\"hljs-title\">CardMonkey</span>>\n    {\n        <span class=\"hljs-comment\">// public override string Portrait => \"Don't need this, by default becomes Pair-Portrait.png\";</span>\n        <span class=\"hljs-comment\">// public override string Icon => \"Don't need this, by default becomes Pair-Icon.png\";</span>\n\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">override</span> <span class=\"hljs-built_in\">int</span> Path => TOP;\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">override</span> <span class=\"hljs-built_in\">int</span> Tier => <span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">override</span> <span class=\"hljs-built_in\">int</span> Cost => <span class=\"hljs-number\">500</span>;\n        \n        <span class=\"hljs-comment\">// public override string DisplayName => \"Don't need this, by default becomes 'Pair'\"</span>\n        \n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">override</span> <span class=\"hljs-built_in\">string</span> Description => <span class=\"hljs-string\">\"Throws two cards at a time\"</span>;\n\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">override</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">ApplyUpgrade</span>(<span class=\"hljs-params\">TowerModel tower</span>)</span>\n        {\n            tower.GetWeapon().emission = \n                <span class=\"hljs-keyword\">new</span> ArcEmissionModel(<span class=\"hljs-string\">\"ArcEmissionModel_\"</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-literal\">false</span>, <span class=\"hljs-literal\">false</span>);\n        }\n    }\n}\n</code></pre>\n<hr>\n<h1 id=\"tower-visuals\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"position-relative\" href=\"#tower-visuals\"><span class=\"icon icon-link\"></span></a>Tower Visuals</h1>\n<p>Just using the above steps, you can create a fully functioning Custom Tower. It's just gonna look exactly like the <code class=\"hljs\">BaseTower</code> we copied from :/</p>\n<p>If you want to give your Tower a custom look, you have two different options, with a third in the works by us.</p>\n<p>First, you can use the 2D Display Model system to just have your Tower rendered as an unanimated png. This is good if you don't want to dip your toes into the world of 3D Display Models even a little bit.</p>\n<p>Second, you can create <code class=\"hljs\">ModTowerDisplay</code> classes that are copies of existing BTD 3D models and change their colors and properties.</p>\n<h2 id=\"2d-towers\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"position-relative\" href=\"#2d-towers\"><span class=\"icon icon-link\"></span></a>2D Towers</h2>\n<p>The first thing you need to do is to add <code class=\"hljs\">public override bool Use2DModel => true;</code> to your <code class=\"hljs\">ModTower</code> class.</p>\n<p>Then, you'll decide if you want to override the <code class=\"hljs\">Get2DTexture(int[] tiers)</code> method in your <code class=\"hljs\">ModTower</code> class.</p>\n<p><code class=\"hljs\">Get2DTexture</code> takes in an <code class=\"hljs\">int[3]</code> and returns the file name of a the correct texture to display for the tower (no directory path or .png).</p>\n<p>By default, if you had a <code class=\"hljs\">ModTower</code> CardMonkey with tiers 2-3-0, it would try (in order): CardMonkey-230, CardMonkey-X3X, CardMonkey-2XX, CardMonkey.</p>\n<p>If you want to provide different functionality for getting the png file name for your tower, then override this method and do so, otherwise just include as many .pngs as you want with appropriate names and the <code class=\"hljs\">ModTower</code> will use them.</p>\n<h2 id=\"modtowerdisplays\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"position-relative\" href=\"#modtowerdisplays\"><span class=\"icon icon-link\"></span></a>ModTowerDisplays</h2>\n<p><code class=\"hljs\">ModTowerDisplays</code> are a special type of <code class=\"hljs\">ModDisplay</code> you can use that will automatically apply themselves to your Tower, so you don't have to deal with manually applying different displays in your <code class=\"hljs\">ModUpgrade</code> code.</p>\n<p>Before you even start this, make sure you've read through <a href=\"\">how to use normal ModDisplays</a>. Once you understand that, then this should be very straightforward.</p>\n<p>Instead of extending <code class=\"hljs\">ModDisplay</code> with your class, extend <code class=\"hljs\">ModTowerDisplay&#x3C;TowerClass></code> where <code class=\"hljs\">TowerClass</code> is your class that extends <code class=\"hljs\">ModTower</code>.</p>\n<p>When you do this, instead of it requiring you to override <code class=\"hljs\">ModifyDisplayNode(UnityDisplayNode node)</code>, it'll require you to override <code class=\"hljs\">UseForTower(int[] tiers)</code>.</p>\n<p><code class=\"hljs\">UseForTower</code> simply takes in an <code class=\"hljs\">int[3]</code> of the Tower's tiers and just returns <code class=\"hljs\">true</code> or <code class=\"hljs\">false</code> for if your Tower should use this Model at those given tiers.</p>\n<p><code class=\"hljs\">ModifyDisplayNode</code> is not required to be overridden, but that's just because it now has the default behavior of setting the Mesh Texture of the Node to be a .png file with the same name as the class. If you want to do something more/other than that, you'll still want to override this method.</p>\n<h2 id=\"example-2\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"position-relative\" href=\"#example-2\"><span class=\"icon icon-link\"></span></a>Example</h2>\n<p>Here's a completed example of a <code class=\"hljs\">ModTowerDisplay</code> class from the CardMonkey mod</p>\n<pre><code class=\"hljs language-cs\"><span class=\"hljs-comment\">/* imports */</span>\n\n<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">CardMonkey.Displays.Tier5</span>\n{\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">TFDisplay</span> : <span class=\"hljs-title\">ModTowerDisplay</span>&#x3C;<span class=\"hljs-title\">CardMonkey</span>>\n    {\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">override</span> <span class=\"hljs-built_in\">string</span> BaseDisplay => GetDisplay(TowerType.BoomerangMonkey, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">4</span>);\n\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">override</span> <span class=\"hljs-built_in\">bool</span> <span class=\"hljs-title\">UseForTower</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">int</span>[] tiers</span>)</span>\n        {\n            <span class=\"hljs-keyword\">return</span> tiers[<span class=\"hljs-number\">2</span>] == <span class=\"hljs-number\">5</span>;\n        }\n\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">override</span> <span class=\"hljs-built_in\">float</span> Scale => <span class=\"hljs-number\">1.2f</span>;\n\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">override</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">ModifyDisplayNode</span>(<span class=\"hljs-params\">UnityDisplayNode node</span>)</span>\n        {\n            <span class=\"hljs-comment\">//node.SaveMeshTexture(); used this to get the texture to edit</span>\n            <span class=\"hljs-comment\">//node.PrintInfo(); used this to get the bone names and other info</span>\n            \n            node.RemoveBone(<span class=\"hljs-string\">\"SuperMonkeyRig:Dart\"</span>);  <span class=\"hljs-comment\">// remove the boomerang from his hand</span>\n            \n            <span class=\"hljs-comment\">// Name in this case is just 'TFDisplay' so it will find 'TFDiplay.png'</span>\n            SetMeshTexture(node, Name);\n        }\n    }\n}\n</code></pre>\n<h1 id=\"custom-tower-set\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"position-relative\" href=\"#custom-tower-set\"><span class=\"icon icon-link\"></span></a>Custom Tower Set</h1>\n<p>If you would like your Tower to be part of a Custom Tower set, you simply need to make a <code class=\"hljs\">ModTowerSet</code> class.</p>\n<pre><code class=\"hljs language-csharp\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Cool</span> : <span class=\"hljs-title\">ModTowerSet</span>\n{\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">override</span> <span class=\"hljs-built_in\">string</span> DisplayName => <span class=\"hljs-string\">\"Cool Towers\"</span>;\n    \n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">override</span> <span class=\"hljs-built_in\">bool</span> AllowInRestrictedModes => <span class=\"hljs-literal\">false</span>; <span class=\"hljs-comment\">// Set to true to still allow these towers in Primary/Military/Magic only, etc</span>\n\n    <span class=\"hljs-comment\">// public override string Button => \"Name of .png file for the group button used in the Monkeys menu, by default Name-Button\";</span>\n\n    <span class=\"hljs-comment\">// public override string Container => \"Name of .png file for the background for towers in the Monkeys menu and the in game shop, by default Name-Container\";</span>\n\n    <span class=\"hljs-comment\">// public override string ContainerLarge => \"Name of .png file for the background used for non-paragon upgrades in the Upgrade screen, by default Name-ContainerLarge\";</span>\n\n    <span class=\"hljs-comment\">// public override string Portrait => \"Name of .png file for the background for in game portraits, by default Name-Portrait\";</span>\n\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&#x3C;summary></span></span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> Set the ordering of this Tower Set, in this case after Primary.</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> If this wasn't here, it'd be added at the end after all other tower sets.</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&#x3C;/summary></span></span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">override</span> <span class=\"hljs-built_in\">int</span> <span class=\"hljs-title\">GetTowerSetIndex</span>(<span class=\"hljs-params\">List&#x3C;TowerSet> towerSets</span>)</span> => towerSets.IndexOf(TowerSet.Primary) + <span class=\"hljs-number\">1</span>;\n}\n</code></pre>\n<p>Then, for any <code class=\"hljs\">ModTower</code> that you want to be part of the set, you change the definition of the class to</p>\n<pre><code class=\"hljs language-csharp\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyCoolTower</span> : <span class=\"hljs-title\">ModTower</span>&#x3C;<span class=\"hljs-title\">Cool</span>>\n{\n    <span class=\"hljs-comment\">/* No override for the TowerSet property */</span>\n    \n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">override</span> <span class=\"hljs-built_in\">int</span> Order => <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">// Towers in your set will be sorted based on ascending Order</span>\n    \n    <span class=\"hljs-comment\">/* ... */</span>\n}\n</code></pre>\n<p><a href=\"https://github.com/gurrenm3/BTD-Mod-Helper/tree/master/Website/public/images/TowerSet\">See Image References</a></p>\n<p>Using a tool like Paint.net to change the hue would be a good way to get them how you want them to look.</p>\n<hr>\n<p><strong>Congratulations! You know have all the required information on the Mod Helper's role in making a fully featured Custom Tower.\nIt's actual functionality will come down to how you edit the Models within the <code class=\"hljs\">ModifyBaseTower</code> and <code class=\"hljs\">ApplyUpgrade</code> methods, which means interacting with Ninja Kiwi's own systems.\nThe Mod Helper's extensions can make that easier.</strong></p>","tableOfContentsHtml":"<nav class=\"toc\"><ol class=\"toc-level toc-level-1\"><li class=\"toc-item toc-item-h1\"><a class=\"toc-link toc-link-h1\" href=\"#modtower\">ModTower</a><ol class=\"toc-level toc-level-2\"><li class=\"toc-item toc-item-h2\"><a class=\"toc-link toc-link-h2\" href=\"#required-properties\">Required Properties</a></li><li class=\"toc-item toc-item-h2\"><a class=\"toc-link toc-link-h2\" href=\"#modifybasetowermodel\">ModifyBaseTowerModel</a></li><li class=\"toc-item toc-item-h2\"><a class=\"toc-link toc-link-h2\" href=\"#portrait-and-icon\">Portrait and Icon</a></li><li class=\"toc-item toc-item-h2\"><a class=\"toc-link toc-link-h2\" href=\"#example\">Example</a></li></ol></li><li class=\"toc-item toc-item-h1\"><a class=\"toc-link toc-link-h1\" href=\"#modupgrades\">ModUpgrade(s)</a><ol class=\"toc-level toc-level-2\"><li class=\"toc-item toc-item-h2\"><a class=\"toc-link toc-link-h2\" href=\"#required-properties-1\">Required Properties</a></li><li class=\"toc-item toc-item-h2\"><a class=\"toc-link toc-link-h2\" href=\"#applyupgrade\">ApplyUpgrade</a></li><li class=\"toc-item toc-item-h2\"><a class=\"toc-link toc-link-h2\" href=\"#portrait-and-icon-1\">Portrait and Icon</a></li><li class=\"toc-item toc-item-h2\"><a class=\"toc-link toc-link-h2\" href=\"#example-1\">Example</a></li></ol></li><li class=\"toc-item toc-item-h1\"><a class=\"toc-link toc-link-h1\" href=\"#tower-visuals\">Tower Visuals</a><ol class=\"toc-level toc-level-2\"><li class=\"toc-item toc-item-h2\"><a class=\"toc-link toc-link-h2\" href=\"#2d-towers\">2D Towers</a></li><li class=\"toc-item toc-item-h2\"><a class=\"toc-link toc-link-h2\" href=\"#modtowerdisplays\">ModTowerDisplays</a></li><li class=\"toc-item toc-item-h2\"><a class=\"toc-link toc-link-h2\" href=\"#example-2\">Example</a></li></ol></li><li class=\"toc-item toc-item-h1\"><a class=\"toc-link toc-link-h1\" href=\"#custom-tower-set\">Custom Tower Set</a></li></ol></nav>","title":"Making a Custom Tower"},"sidebar":{"contentHtml":"<h5 id=\"home\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"position-relative\" href=\"#home\"><span class=\"icon icon-link\"></span></a><a href=\"/wiki/Home\">Home</a></h5>\n<h5 id=\"install-guide\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"position-relative\" href=\"#install-guide\"><span class=\"icon icon-link\"></span></a><a href=\"/wiki/Install-Guide\">Install Guide</a></h5>\n<h6 id=\"starting-btd-modding\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"position-relative\" href=\"#starting-btd-modding\"><span class=\"icon icon-link\"></span></a>Starting BTD Modding</h6>\n<p><a href=\"/wiki/Prerequisites\">Prerequisites</a></p>\n<p><a href=\"/wiki/Getting-Started\">Getting Started</a></p>\n<h6 id=\"mod-helper-features\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"position-relative\" href=\"#mod-helper-features\"><span class=\"icon icon-link\"></span></a>Mod Helper Features</h6>\n<p><a href=\"/wiki/Making-a-Custom-Tower\"><strong>Making a Custom Tower</strong></a></p>\n<p><a href=\"/wiki/Making-a-Custom-Paragon\"><strong>Making a Custom Paragon</strong></a></p>\n<p><a href=\"/wiki/Making-a-Custom-Hero\"><strong>Making a Custom Hero</strong></a></p>\n<p><a href=\"/wiki/Appearing-in-the-Mod-Browser\"><strong>Appearing in the Mod Browser</strong></a></p>\n<p><a href=\"/wiki/Localization\">Localization</a></p>\n<p><a href=\"/wiki/Making-a-Custom-Bloon\">Making a Custom Bloon</a></p>\n<p><a href=\"/wiki/Making-a-Custom-Game-Mode\">Making a Custom Game Mode</a></p>\n<p><a href=\"/wiki/Making-a-Custom-Round-Set\">Making a Custom Round Set</a></p>\n<p><a href=\"/wiki/Making-a-Custom-Jukebox-Track\">Making a Custom Jukebox Track</a></p>\n<p><a href=\"/wiki/Making-a-Custom-Artifact\">Making a Custom Artifact</a></p>\n<p><a href=\"/wiki/Custom-UI\">Custom UI (ModHelperComponents)</a></p>\n<p><a href=\"/wiki/Custom-Menu-Screens\">Custom Menu Screens</a></p>\n<p><a href=\"/wiki/Custom-Byte-Loaders\">Custom Byte Loaders</a></p>\n<h6 id=\"btd-modding-info\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"position-relative\" href=\"#btd-modding-info\"><span class=\"icon icon-link\"></span></a>BTD Modding Info</h6>\n<p><a href=\"/wiki/BTD6-Internal-Structure\">BTD6 Internal Structure</a></p>\n<p><a href=\"/wiki/Looking-at-BTD6-Code-(Sorta)\">Looking at BTD6 Code (Sorta)</a></p>\n<p><a href=\"/wiki/IL2CPP-Is-Weird\">IL2CPP Is Weird</a></p>\n<p><a href=\"/wiki/Useful-Resources\">Useful Resources</a></p>\n<h6 id=\"mod-helper-utilities\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"position-relative\" href=\"#mod-helper-utilities\"><span class=\"icon icon-link\"></span></a>Mod Helper Utilities</h6>\n<p><a href=\"/wiki/Using-Mod-Helper-Hooks\">Using Mod Helper Hooks</a></p>\n<p><a href=\"/wiki/ModContent\">ModContent</a></p>\n<p><a href=\"/wiki/Custom-Textures-and-Displays\">Custom Textures and Displays</a></p>\n<p><a href=\"/wiki/Mod-Settings\">In Game Mod Settings</a></p>\n<h6 id=\"extension-methods\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"position-relative\" href=\"#extension-methods\"><span class=\"icon icon-link\"></span></a>Extension Methods</h6>\n<p><a href=\"/wiki/Common-Extension-Methods\">Common Extension Methods</a></p>\n<p><a href=\"/wiki/Array-extension-methods\">Array Extension Methods</a></p>","tableOfContentsHtml":"<nav class=\"toc\"><ol class=\"toc-level toc-level-1\"><li class=\"toc-item toc-item-h5\"><a class=\"toc-link toc-link-h5\" href=\"#home\">Home</a></li><li class=\"toc-item toc-item-h5\"><a class=\"toc-link toc-link-h5\" href=\"#install-guide\">Install Guide</a><ol class=\"toc-level toc-level-2\"><li class=\"toc-item toc-item-h6\"><a class=\"toc-link toc-link-h6\" href=\"#starting-btd-modding\">Starting BTD Modding</a></li><li class=\"toc-item toc-item-h6\"><a class=\"toc-link toc-link-h6\" href=\"#mod-helper-features\">Mod Helper Features</a></li><li class=\"toc-item toc-item-h6\"><a class=\"toc-link toc-link-h6\" href=\"#btd-modding-info\">BTD Modding Info</a></li><li class=\"toc-item toc-item-h6\"><a class=\"toc-link toc-link-h6\" href=\"#mod-helper-utilities\">Mod Helper Utilities</a></li><li class=\"toc-item toc-item-h6\"><a class=\"toc-link toc-link-h6\" href=\"#extension-methods\">Extension Methods</a></li></ol></li></ol></nav>"}},"__N_SSG":true}