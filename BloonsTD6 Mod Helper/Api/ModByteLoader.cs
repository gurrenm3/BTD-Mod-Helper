using System.IO;
using Assets.Scripts.Utils;
using Exception = System.Exception;
using Object = Il2CppSystem.Object;

namespace BTD_Mod_Helper.Api;

public abstract partial class ModByteLoader
{
    /// <summary>
    /// Generates a ModByteLoader class and corresponding .bytes file within the BloonsTD6 directory
    /// </summary>
    /// <param name="model">The model that you want to be able to be statically loaded from bytes</param>
    /// <param name="loaderFilePath">The absolute file path on your system where the .cs Loader file should end up</param>
    /// <param name="bytesFilePath">The absolute file path on your system where the bytes file should end up</param>
    public static void Generate<T>(T model, string loaderFilePath, string bytesFilePath) where T : Object
    {
        var unconvertedLoader = $"{FileIOUtil.sandboxRoot}UnconvertedLoader.cs";

        var loaderName = loaderFilePath.Substring(loaderFilePath.LastIndexOf('\\') + 1).Split('.')[0];
        var bytesFileName = bytesFilePath.Substring(bytesFilePath.LastIndexOf('\\') + 1);

        var flatFileCodeGen = new FlatFileCodeGen();

        try
        {
            flatFileCodeGen.Generate(model, bytesFilePath, unconvertedLoader);
        }
        catch (Exception e)
        {
            ModHelper.Error($"Failed to generate bytes {bytesFilePath}");
            ModHelper.Error(e);
            return;
        }

        ModHelper.Log($"Generated bytes {bytesFilePath}");

        try
        {
            ConvertLoader<T>(unconvertedLoader, loaderFilePath, loaderName, bytesFileName);
        }
        catch (Exception e)
        {
            ModHelper.Error($"Failed to generate ModByteLoader {loaderFilePath}");
            ModHelper.Error(e);
            return;
        }

        ModHelper.Log($"Generated ModByteLoader {loaderFilePath}");

        File.Delete(unconvertedLoader);
    }
}